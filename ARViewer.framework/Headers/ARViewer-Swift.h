#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ARVIEWER_SWIFT_H
#define ARVIEWER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ARKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ARViewer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC8ARViewer13ARMeasurement") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARMeasurement : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Figure;
enum FeatureType : NSInteger;
@protocol ARViewerDelegate;
@class NSCoder;

/// <h1>ARViewer</h1>
/// This is the class that implemented Augmented Reality.
/// You can configure <code>ARViewer</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and handles virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer8ARViewer") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer : UIView
/// Returns an array of figures currently loaded in the scene.
@property (nonatomic, readonly, copy) NSArray<Figure *> * _Nonnull loadedFigures;
/// A feature mode of ARViewer.
@property (nonatomic, readonly) enum FeatureType featureMode;
/// The object that acts as the delegate of the <code>ARViewer</code>.
@property (nonatomic, weak) id <ARViewerDelegate> _Nullable delegate;
/// An object that manages the measuring.
@property (nonatomic, strong) ARMeasurement * _Nonnull measurement;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, State, closed) {
  StateConfigure = 0,
  StateRun = 1,
  StatePaused = 2,
  StateInvalid = 3,
};


/// The <code>ARViewerDelegate</code> protocol defines methods that allow you to manage the session and behavior. The methods of this protocol are all optional.
SWIFT_PROTOCOL("_TtP8ARViewer16ARViewerDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol ARViewerDelegate
@optional
/// Tells the delegate that the app has permission for camera type.
/// \param authorized <code>true</code> if the app has permission.
///
- (void)permissionAuthorized:(BOOL)authorized;
/// Tells the delegate that plane (a.k.a surface) was detected.
- (void)findPlane;
/// (@deprecated) Tells the delegate that <code>ARViewer</code> was closed.
- (void)closeARViewer;
/// Tells the delegate that the figure was placed.
/// \param figure The figure being placed.
///
- (void)didPlaceWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate that the figure was selected.
/// \param selectedFigure The figure being selected.
///
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
/// Tells the delegate that the figure was rotated.
/// \param selectedFigure The figure being rotated.
///
- (void)rotateChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the figure was scaled.
/// \param selectedFigure The figure being scaled.
///
- (void)scaleChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the QR code was detected.
/// \param url The URL of QR code.
///
- (void)qrDetectedWithUrl:(NSURL * _Nullable)url;
/// Tells the delegate that the camera is indicating inside of a surface.
/// \param time The current system time, in seconds. Use this parameter for any time-based elements of your logic.
///
/// \param rayingInPlane <code>true</code> if the camera is indicating insde of a surface. otherwise, <code>false</code>.
///
- (void)sessionWithUpdateAtTime:(NSTimeInterval)time rayingInPlane:(BOOL)rayingInPlane;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARViewerDelegate>
- (void)closeARViewer;
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
@end

@protocol SCNSceneRenderer;
@class ARAnchor;
@class SCNNode;
@class ARSession;
@class ARCamera;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARSCNViewDelegate, ARSessionDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
- (SCNNode * _Nullable)renderer:(id <SCNSceneRenderer> _Nonnull)renderer nodeForAnchor:(ARAnchor * _Nonnull)anchor SWIFT_WARN_UNUSED_RESULT;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAddNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRemoveNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
- (BOOL)sessionShouldAttemptRelocalization:(ARSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end

enum TrackingMode : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// Starts AR processing for the ARViewer with the specified <code>TrackingMode</code>.
/// important:
///
/// If the session is running for the first time, this parameter should be <code>none</code>.
/// \param trackingMode <code>TrackingMode</code> affecting the session that detects.
///
- (void)runWithTrackingMode:(enum TrackingMode)trackingMode;
/// Pauses processing in the session. Then, session would not update extents of surfaces.
- (void)pause;
@end

@class UIImage;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// A sample figureâs asset id
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSampleAssetId;)
+ (NSString * _Nonnull)kSampleAssetId SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value indicating whether the current device supports ARViewer.
+ (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
/// Requests that the <code>Figure</code> to be loaded.
/// \param assetId <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
- (void)requestFigureWithAssetId:(NSString * _Nonnull)assetId token:(NSString * _Nullable)token;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)requestFigure:(Figure * _Nonnull)figure;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)copyFigureWithFigure:(Figure * _Nonnull)figure;
/// Renders the viewâs scene into a new image object.
/// This method is thread-safe and may be called at any time.
///
/// returns:
/// An image object depicting the view in its current state.
- (UIImage * _Nonnull)captureScene SWIFT_WARN_UNUSED_RESULT;
/// Resets the envrionment of AR session.
/// All placed figures, planes, anchors are removed.
- (void)resetEnvironment;
/// Animates the figureâs scale to origin size.
- (void)changeToOriginSize;
/// Changes the selected figureâs scale.
/// \param ratio The value of scale. Must be a non-negative value.
///
/// \param allowAnimation The value of <code>Boolean</code> that allows scale animation.
///
- (void)changeToScaleWithRatio:(float)ratio allowAnimation:(BOOL)allowAnimation;
/// Removes the figure from the scene.
/// \param figure The figure to remove.
///
- (void)deleteFigureWithFigure:(Figure * _Nonnull)figure;
/// Deselects a figure selected.
- (void)unSelectFigure;
/// A <code>Boolean</code> value that states whether the session detected flat surfaces.
///
/// returns:
/// Returns <code>true</code> if any surface is detected. The default value is <code>false</code>.
- (BOOL)isPlaneDetected SWIFT_WARN_UNUSED_RESULT;
/// Places the preloaded figure.
/// important:
///
/// After invoking method that <code>requestFigure(assetId:, token:)</code>. You must invoke to place on a surface.
- (void)placePreloadFigure;
/// Sets the feature type
/// \param feature The type of feature which you want to use
///
- (void)setViewerModeWithFeature:(enum FeatureType)feature;
/// Sets the point to measure.
/// Sets a point from the 2D pixel coordinate system of the view to the 3D world coordinate system of the scene. (According to reticleâs position)
/// important:
///
/// Avoid calling <code>measure()</code> If the <code>ARCamera</code> is not indicating inside of surface.
- (void)measure;
/// Undos that last measured point
/// It has two diffrent operations depend on measuring state.
/// If it has one point that line is updated following reticle, It is cancelled. Otherwise, removes the last measurement point.
- (void)undo;
@end


@class SCNScene;

SWIFT_CLASS("_TtC8ARViewer15ARViewerSCNView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewerSCNView : ARSCNView
@property (nonatomic, strong) SCNScene * _Nonnull scene;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame options:(NSDictionary<NSString *, id> * _Nullable)options SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

/// Values for feature mode.
/// You can set of viewer mode, see below.
/// \code
/// arViewer.setViewerMode(.AR)
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, FeatureType, closed) {
/// A feature type that detects surfaces and tracking session.
/// attention:
/// If possible, avoid setting AR mode. ARViewer set the mode automatically and manage efficiently.
  FeatureTypeAR = 0,
/// A feature type that detects a QR code.
  FeatureTypeQR = 1,
/// A feature type that tracking session without detects surfaces.
/// note:
///
/// You shoud use this, If your turning back to AR mode.
  FeatureTypeECO = 2,
/// A feature type that measure the surfaces.
  FeatureTypeMeasure = 3,
};

@class SCNGeometry;

SWIFT_CLASS("_TtC8ARViewer6UBNode")
@interface UBNode : SCNNode
@property (nonatomic, strong) SCNGeometry * _Nullable geometry;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UBAsset;

SWIFT_CLASS("_TtC8ARViewer6Figure") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure : UBNode
/// An instance of <code>UBAsset</code>.
/// You can get information of <code>Figure</code> like title, brand, styles and so on.
@property (nonatomic, strong) UBAsset * _Nullable asset;
@property (nonatomic) SCNVector3 scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UBStyle;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure (SWIFT_EXTENSION(ARViewer))
- (void)setStyleWithStyle:(UBStyle * _Nonnull)style progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nullable)(void))completion;
@end



/// The <code>FigureApperanceDelegate</code> protocol defines methods that allow you to manage the preloaded apperance.
/// It is only effective when behavior is <code>PreloadBehaviour</code>.
SWIFT_PROTOCOL("_TtP8ARViewer24FigureAppearanceDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureAppearanceDelegate
@optional
/// Asks the delegate if the preloaded figure should be hidden.
/// If you not implement this protocol. The default value is <code>false</code>.
///
/// returns:
///
/// <code>true</code> if the figure should be hidden or <code>false</code> if it should not.
- (BOOL)shouldHiddenPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the opacity of the specified figure.
/// If you not implement this protocol. The default value is <code>0.8</code>.
///
/// returns:
///
/// The opacity of the specified figure. The value must be between 0 and 1.
- (CGFloat)opacityPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that <code>Figure</code> load delegates implement to interact with a <code>Figure</code> load request.
/// The <code>FigureLoadDelegate</code> protocol defines methods that allow you to receive informational callbacks about the asynchronous load of a <code>Figure</code> request.
SWIFT_PROTOCOL("_TtP8ARViewer18FigureLoadDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureLoadDelegate
@optional
/// Tells the delegate when the download progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the downloading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the downloading. The value may be <code>1</code>.
///
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the download completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
/// Tells the delegate when the load progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the loading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the loading. The value may be <code>1</code>.
///
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the load completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param figure A figure that been loaded.
///
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate when the task finishes unsuccessfully.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param errorCode The error code
///
/// \param message A string containing the description of the error.
///
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
@end


/// A view for displaying 3D content.
/// <h1>FigureView</h1>
/// This is the class that implemented 3D Viewer.
/// You can configure <code>FigureView</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and displays virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer10FigureView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView : UIView
/// A figure which is loaded.
/// The value may be nil until object being loaded.
@property (nonatomic, weak) Figure * _Nullable figure;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests that the <code>Figure</code> to be loaded.
/// \param uuid <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
/// \param thumb the URL instance of thumbnail image path. It is optional.
///
- (void)requestFigureWithUuid:(NSString * _Nonnull)uuid token:(NSString * _Nullable)token thumb:(NSURL * _Nullable)thumb;
/// Requests that the <code>Figure</code> which is sample.
- (void)requestFigure;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <SCNSceneRendererDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <FigureAppearanceDelegate, FigureLoadDelegate>
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
@end

@class UIEvent;

SWIFT_CLASS("_TtC8ARViewer15PassthroughView")
@interface PassthroughView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, TrackingMode, closed) {
/// Tracking surfaces continuously, but not updating extents of surfaces.
  TrackingModeNone = 0,
/// Tracking surfaces that are perpendicular to gravity.
  TrackingModeHorizontal = 1,
/// Tracking surfaces that are parallel to gravity.
  TrackingModeVertical = 2,
/// Tracking surfaces both horizontal and vertical.
  TrackingModeAll = 3,
};


/// A informative class that manages properties of figure.
SWIFT_CLASS("_TtC8ARViewer7UBAsset") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface UBAsset : NSObject
/// The <code>UUID</code> of <code>UBAsset</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_id;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// A brand name of asset
@property (nonatomic, readonly, copy) NSString * _Nonnull brand;
@property (nonatomic, readonly, copy) NSString * _Nonnull thumbnail_path;
/// An array of <code>UBStyle</code>
@property (nonatomic, copy) NSArray<UBStyle *> * _Nonnull styles;
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A informative class that represents the figureâs apperance.
SWIFT_CLASS("_TtCC8ARViewer7UBAsset7UBStyle")
@interface UBStyle : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull asset_id;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL is_default;
@property (nonatomic, copy) NSString * _Nonnull thumbnail_path;
@property (nonatomic, copy) NSDate * _Nonnull created_date;
@property (nonatomic, copy) NSDate * _Nonnull updated_date;
@property (nonatomic, copy) NSDate * _Nonnull deleted_date;
/// A  <code>URL</code> path of color chip image
@property (nonatomic, copy) NSString * _Nonnull color_chip_path;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ARVIEWER_SWIFT_H
#define ARVIEWER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ARKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ARViewer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC8ARViewer13ARMeasurement") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARMeasurement : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Figure;
enum FeatureType : NSInteger;
@protocol ARViewerDelegate;
@class NSCoder;

/// <h1>ARViewer</h1>
/// This is the class that implemented Augmented Reality.
/// You can configure <code>ARViewer</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and handles virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer8ARViewer") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer : UIView
/// Returns an array of figures currently loaded in the scene.
@property (nonatomic, readonly, copy) NSArray<Figure *> * _Nonnull loadedFigures;
/// A feature mode of ARViewer.
@property (nonatomic, readonly) enum FeatureType featureMode;
/// The object that acts as the delegate of the <code>ARViewer</code>.
@property (nonatomic, weak) id <ARViewerDelegate> _Nullable delegate;
/// An object that manages the measuring.
@property (nonatomic, strong) ARMeasurement * _Nonnull measurement;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, State, closed) {
  StateConfigure = 0,
  StateRun = 1,
  StatePaused = 2,
  StateInvalid = 3,
};


/// The <code>ARViewerDelegate</code> protocol defines methods that allow you to manage the session and behavior. The methods of this protocol are all optional.
SWIFT_PROTOCOL("_TtP8ARViewer16ARViewerDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol ARViewerDelegate
@optional
/// Tells the delegate that the app has permission for camera type.
/// \param authorized <code>true</code> if the app has permission.
///
- (void)permissionAuthorized:(BOOL)authorized;
/// Tells the delegate that plane (a.k.a surface) was detected.
- (void)findPlane;
/// (@deprecated) Tells the delegate that <code>ARViewer</code> was closed.
- (void)closeARViewer;
/// Tells the delegate that the figure was placed.
/// \param figure The figure being placed.
///
- (void)didPlaceWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate that the figure was selected.
/// \param selectedFigure The figure being selected.
///
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
/// Tells the delegate that the figure was rotated.
/// \param selectedFigure The figure being rotated.
///
- (void)rotateChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the figure was scaled.
/// \param selectedFigure The figure being scaled.
///
- (void)scaleChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the QR code was detected.
/// \param url The URL of QR code.
///
- (void)qrDetectedWithUrl:(NSURL * _Nullable)url;
/// Tells the delegate that the camera is indicating inside of a surface.
/// \param time The current system time, in seconds. Use this parameter for any time-based elements of your logic.
///
/// \param rayingInPlane <code>true</code> if the camera is indicating insde of a surface. otherwise, <code>false</code>.
///
- (void)sessionWithUpdateAtTime:(NSTimeInterval)time rayingInPlane:(BOOL)rayingInPlane;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARViewerDelegate>
- (void)closeARViewer;
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
@end

@protocol SCNSceneRenderer;
@class ARAnchor;
@class SCNNode;
@class ARSession;
@class ARCamera;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARSCNViewDelegate, ARSessionDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
- (SCNNode * _Nullable)renderer:(id <SCNSceneRenderer> _Nonnull)renderer nodeForAnchor:(ARAnchor * _Nonnull)anchor SWIFT_WARN_UNUSED_RESULT;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAddNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRemoveNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
- (BOOL)sessionShouldAttemptRelocalization:(ARSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end

enum TrackingMode : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// Starts AR processing for the ARViewer with the specified <code>TrackingMode</code>.
/// important:
///
/// If the session is running for the first time, this parameter should be <code>none</code>.
/// \param trackingMode <code>TrackingMode</code> affecting the session that detects.
///
- (void)runWithTrackingMode:(enum TrackingMode)trackingMode;
/// Pauses processing in the session. Then, session would not update extents of surfaces.
- (void)pause;
@end

@class UIImage;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// A sample figureâs asset id
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSampleAssetId;)
+ (NSString * _Nonnull)kSampleAssetId SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value indicating whether the current device supports ARViewer.
+ (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
/// Requests that the <code>Figure</code> to be loaded.
/// \param assetId <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
- (void)requestFigureWithAssetId:(NSString * _Nonnull)assetId token:(NSString * _Nullable)token;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)requestFigure:(Figure * _Nonnull)figure;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)copyFigureWithFigure:(Figure * _Nonnull)figure;
/// Renders the viewâs scene into a new image object.
/// This method is thread-safe and may be called at any time.
///
/// returns:
/// An image object depicting the view in its current state.
- (UIImage * _Nonnull)captureScene SWIFT_WARN_UNUSED_RESULT;
/// Resets the envrionment of AR session.
/// All placed figures, planes, anchors are removed.
- (void)resetEnvironment;
/// Animates the figureâs scale to origin size.
- (void)changeToOriginSize;
/// Changes the selected figureâs scale.
/// \param ratio The value of scale. Must be a non-negative value.
///
/// \param allowAnimation The value of <code>Boolean</code> that allows scale animation.
///
- (void)changeToScaleWithRatio:(float)ratio allowAnimation:(BOOL)allowAnimation;
/// Removes the figure from the scene.
/// \param figure The figure to remove.
///
- (void)deleteFigureWithFigure:(Figure * _Nonnull)figure;
/// Deselects a figure selected.
- (void)unSelectFigure;
/// A <code>Boolean</code> value that states whether the session detected flat surfaces.
///
/// returns:
/// Returns <code>true</code> if any surface is detected. The default value is <code>false</code>.
- (BOOL)isPlaneDetected SWIFT_WARN_UNUSED_RESULT;
/// Places the preloaded figure.
/// important:
///
/// After invoking method that <code>requestFigure(assetId:, token:)</code>. You must invoke to place on a surface.
- (void)placePreloadFigure;
/// Sets the feature type
/// \param feature The type of feature which you want to use
///
- (void)setViewerModeWithFeature:(enum FeatureType)feature;
/// Sets the point to measure.
/// Sets a point from the 2D pixel coordinate system of the view to the 3D world coordinate system of the scene. (According to reticleâs position)
/// important:
///
/// Avoid calling <code>measure()</code> If the <code>ARCamera</code> is not indicating inside of surface.
- (void)measure;
/// Undos that last measured point
/// It has two diffrent operations depend on measuring state.
/// If it has one point that line is updated following reticle, It is cancelled. Otherwise, removes the last measurement point.
- (void)undo;
@end


@class SCNScene;

SWIFT_CLASS("_TtC8ARViewer15ARViewerSCNView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewerSCNView : ARSCNView
@property (nonatomic, strong) SCNScene * _Nonnull scene;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame options:(NSDictionary<NSString *, id> * _Nullable)options SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

/// Values for feature mode.
/// You can set of viewer mode, see below.
/// \code
/// arViewer.setViewerMode(.AR)
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, FeatureType, closed) {
/// A feature type that detects surfaces and tracking session.
/// attention:
/// If possible, avoid setting AR mode. ARViewer set the mode automatically and manage efficiently.
  FeatureTypeAR = 0,
/// A feature type that detects a QR code.
  FeatureTypeQR = 1,
/// A feature type that tracking session without detects surfaces.
/// note:
///
/// You shoud use this, If your turning back to AR mode.
  FeatureTypeECO = 2,
/// A feature type that measure the surfaces.
  FeatureTypeMeasure = 3,
};

@class SCNGeometry;

SWIFT_CLASS("_TtC8ARViewer6UBNode")
@interface UBNode : SCNNode
@property (nonatomic, strong) SCNGeometry * _Nullable geometry;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UBAsset;

SWIFT_CLASS("_TtC8ARViewer6Figure") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure : UBNode
/// An instance of <code>UBAsset</code>.
/// You can get information of <code>Figure</code> like title, brand, styles and so on.
@property (nonatomic, strong) UBAsset * _Nullable asset;
@property (nonatomic) SCNVector3 scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UBStyle;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure (SWIFT_EXTENSION(ARViewer))
- (void)setStyleWithStyle:(UBStyle * _Nonnull)style progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nullable)(void))completion;
@end



/// The <code>FigureApperanceDelegate</code> protocol defines methods that allow you to manage the preloaded apperance.
/// It is only effective when behavior is <code>PreloadBehaviour</code>.
SWIFT_PROTOCOL("_TtP8ARViewer24FigureAppearanceDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureAppearanceDelegate
@optional
/// Asks the delegate if the preloaded figure should be hidden.
/// If you not implement this protocol. The default value is <code>false</code>.
///
/// returns:
///
/// <code>true</code> if the figure should be hidden or <code>false</code> if it should not.
- (BOOL)shouldHiddenPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the opacity of the specified figure.
/// If you not implement this protocol. The default value is <code>0.8</code>.
///
/// returns:
///
/// The opacity of the specified figure. The value must be between 0 and 1.
- (CGFloat)opacityPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that <code>Figure</code> load delegates implement to interact with a <code>Figure</code> load request.
/// The <code>FigureLoadDelegate</code> protocol defines methods that allow you to receive informational callbacks about the asynchronous load of a <code>Figure</code> request.
SWIFT_PROTOCOL("_TtP8ARViewer18FigureLoadDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureLoadDelegate
@optional
/// Tells the delegate when the download progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the downloading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the downloading. The value may be <code>1</code>.
///
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the download completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
/// Tells the delegate when the load progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the loading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the loading. The value may be <code>1</code>.
///
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the load completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param figure A figure that been loaded.
///
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate when the task finishes unsuccessfully.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param errorCode The error code
///
/// \param message A string containing the description of the error.
///
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
@end


/// A view for displaying 3D content.
/// <h1>FigureView</h1>
/// This is the class that implemented 3D Viewer.
/// You can configure <code>FigureView</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and displays virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer10FigureView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView : UIView
/// A figure which is loaded.
/// The value may be nil until object being loaded.
@property (nonatomic, weak) Figure * _Nullable figure;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests that the <code>Figure</code> to be loaded.
/// \param uuid <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
/// \param thumb the URL instance of thumbnail image path. It is optional.
///
- (void)requestFigureWithUuid:(NSString * _Nonnull)uuid token:(NSString * _Nullable)token thumb:(NSURL * _Nullable)thumb;
/// Requests that the <code>Figure</code> which is sample.
- (void)requestFigure;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <SCNSceneRendererDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <FigureAppearanceDelegate, FigureLoadDelegate>
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
@end

@class UIEvent;

SWIFT_CLASS("_TtC8ARViewer15PassthroughView")
@interface PassthroughView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, TrackingMode, closed) {
/// Tracking surfaces continuously, but not updating extents of surfaces.
  TrackingModeNone = 0,
/// Tracking surfaces that are perpendicular to gravity.
  TrackingModeHorizontal = 1,
/// Tracking surfaces that are parallel to gravity.
  TrackingModeVertical = 2,
/// Tracking surfaces both horizontal and vertical.
  TrackingModeAll = 3,
};


/// A informative class that manages properties of figure.
SWIFT_CLASS("_TtC8ARViewer7UBAsset") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface UBAsset : NSObject
/// The <code>UUID</code> of <code>UBAsset</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_id;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// A brand name of asset
@property (nonatomic, readonly, copy) NSString * _Nonnull brand;
@property (nonatomic, readonly, copy) NSString * _Nonnull thumbnail_path;
/// An array of <code>UBStyle</code>
@property (nonatomic, copy) NSArray<UBStyle *> * _Nonnull styles;
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A informative class that represents the figureâs apperance.
SWIFT_CLASS("_TtCC8ARViewer7UBAsset7UBStyle")
@interface UBStyle : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull asset_id;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL is_default;
@property (nonatomic, copy) NSString * _Nonnull thumbnail_path;
@property (nonatomic, copy) NSDate * _Nonnull created_date;
@property (nonatomic, copy) NSDate * _Nonnull updated_date;
@property (nonatomic, copy) NSDate * _Nonnull deleted_date;
/// A  <code>URL</code> path of color chip image
@property (nonatomic, copy) NSString * _Nonnull color_chip_path;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ARVIEWER_SWIFT_H
#define ARVIEWER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ARKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ARViewer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC8ARViewer13ARMeasurement") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARMeasurement : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Figure;
enum FeatureType : NSInteger;
@protocol ARViewerDelegate;
@class NSCoder;

/// <h1>ARViewer</h1>
/// This is the class that implemented Augmented Reality.
/// You can configure <code>ARViewer</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and handles virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer8ARViewer") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer : UIView
/// Returns an array of figures currently loaded in the scene.
@property (nonatomic, readonly, copy) NSArray<Figure *> * _Nonnull loadedFigures;
/// A feature mode of ARViewer.
@property (nonatomic, readonly) enum FeatureType featureMode;
/// The object that acts as the delegate of the <code>ARViewer</code>.
@property (nonatomic, weak) id <ARViewerDelegate> _Nullable delegate;
/// An object that manages the measuring.
@property (nonatomic, strong) ARMeasurement * _Nonnull measurement;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, State, closed) {
  StateConfigure = 0,
  StateRun = 1,
  StatePaused = 2,
  StateInvalid = 3,
};


/// The <code>ARViewerDelegate</code> protocol defines methods that allow you to manage the session and behavior. The methods of this protocol are all optional.
SWIFT_PROTOCOL("_TtP8ARViewer16ARViewerDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol ARViewerDelegate
@optional
/// Tells the delegate that the app has permission for camera type.
/// \param authorized <code>true</code> if the app has permission.
///
- (void)permissionAuthorized:(BOOL)authorized;
/// Tells the delegate that plane (a.k.a surface) was detected.
- (void)findPlane;
/// (@deprecated) Tells the delegate that <code>ARViewer</code> was closed.
- (void)closeARViewer;
/// Tells the delegate that the figure was placed.
/// \param figure The figure being placed.
///
- (void)didPlaceWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate that the figure was selected.
/// \param selectedFigure The figure being selected.
///
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
/// Tells the delegate that the figure was rotated.
/// \param selectedFigure The figure being rotated.
///
- (void)rotateChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the figure was scaled.
/// \param selectedFigure The figure being scaled.
///
- (void)scaleChangedWithSelectedFigure:(Figure * _Nonnull)selectedFigure;
/// Tells the delegate that the QR code was detected.
/// \param url The URL of QR code.
///
- (void)qrDetectedWithUrl:(NSURL * _Nullable)url;
/// Tells the delegate that the camera is indicating inside of a surface.
/// \param time The current system time, in seconds. Use this parameter for any time-based elements of your logic.
///
/// \param rayingInPlane <code>true</code> if the camera is indicating insde of a surface. otherwise, <code>false</code>.
///
- (void)sessionWithUpdateAtTime:(NSTimeInterval)time rayingInPlane:(BOOL)rayingInPlane;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARViewerDelegate>
- (void)closeARViewer;
- (void)selectProductWithSelectedFigure:(Figure * _Nullable)selectedFigure;
@end

@protocol SCNSceneRenderer;
@class ARAnchor;
@class SCNNode;
@class ARSession;
@class ARCamera;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer)) <ARSCNViewDelegate, ARSessionDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
- (SCNNode * _Nullable)renderer:(id <SCNSceneRenderer> _Nonnull)renderer nodeForAnchor:(ARAnchor * _Nonnull)anchor SWIFT_WARN_UNUSED_RESULT;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didAddNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didUpdateNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer didRemoveNode:(SCNNode * _Nonnull)node forAnchor:(ARAnchor * _Nonnull)anchor;
- (void)session:(ARSession * _Nonnull)session cameraDidChangeTrackingState:(ARCamera * _Nonnull)camera;
- (void)session:(ARSession * _Nonnull)session didFailWithError:(NSError * _Nonnull)error;
- (void)sessionWasInterrupted:(ARSession * _Nonnull)session;
- (void)sessionInterruptionEnded:(ARSession * _Nonnull)session;
- (BOOL)sessionShouldAttemptRelocalization:(ARSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
@end

enum TrackingMode : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// Starts AR processing for the ARViewer with the specified <code>TrackingMode</code>.
/// important:
///
/// If the session is running for the first time, this parameter should be <code>none</code>.
/// \param trackingMode <code>TrackingMode</code> affecting the session that detects.
///
- (void)runWithTrackingMode:(enum TrackingMode)trackingMode;
/// Pauses processing in the session. Then, session would not update extents of surfaces.
- (void)pause;
@end

@class UIImage;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewer (SWIFT_EXTENSION(ARViewer))
/// A sample figureâs asset id
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kSampleAssetId;)
+ (NSString * _Nonnull)kSampleAssetId SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value indicating whether the current device supports ARViewer.
+ (BOOL)isSupported SWIFT_WARN_UNUSED_RESULT;
/// Requests that the <code>Figure</code> to be loaded.
/// \param assetId <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
- (void)requestFigureWithAssetId:(NSString * _Nonnull)assetId token:(NSString * _Nullable)token;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)requestFigure:(Figure * _Nonnull)figure;
/// Requests that the <code>Figure</code> to be copied.
/// \param figure The figure to be copied.
///
- (void)copyFigureWithFigure:(Figure * _Nonnull)figure;
/// Renders the viewâs scene into a new image object.
/// This method is thread-safe and may be called at any time.
///
/// returns:
/// An image object depicting the view in its current state.
- (UIImage * _Nonnull)captureScene SWIFT_WARN_UNUSED_RESULT;
/// Resets the envrionment of AR session.
/// All placed figures, planes, anchors are removed.
- (void)resetEnvironment;
/// Animates the figureâs scale to origin size.
- (void)changeToOriginSize;
/// Changes the selected figureâs scale.
/// \param ratio The value of scale. Must be a non-negative value.
///
/// \param allowAnimation The value of <code>Boolean</code> that allows scale animation.
///
- (void)changeToScaleWithRatio:(float)ratio allowAnimation:(BOOL)allowAnimation;
/// Removes the figure from the scene.
/// \param figure The figure to remove.
///
- (void)deleteFigureWithFigure:(Figure * _Nonnull)figure;
/// Deselects a figure selected.
- (void)unSelectFigure;
/// A <code>Boolean</code> value that states whether the session detected flat surfaces.
///
/// returns:
/// Returns <code>true</code> if any surface is detected. The default value is <code>false</code>.
- (BOOL)isPlaneDetected SWIFT_WARN_UNUSED_RESULT;
/// Places the preloaded figure.
/// important:
///
/// After invoking method that <code>requestFigure(assetId:, token:)</code>. You must invoke to place on a surface.
- (void)placePreloadFigure;
/// Sets the feature type
/// \param feature The type of feature which you want to use
///
- (void)setViewerModeWithFeature:(enum FeatureType)feature;
/// Sets the point to measure.
/// Sets a point from the 2D pixel coordinate system of the view to the 3D world coordinate system of the scene. (According to reticleâs position)
/// important:
///
/// Avoid calling <code>measure()</code> If the <code>ARCamera</code> is not indicating inside of surface.
- (void)measure;
/// Undos that last measured point
/// It has two diffrent operations depend on measuring state.
/// If it has one point that line is updated following reticle, It is cancelled. Otherwise, removes the last measurement point.
- (void)undo;
@end


@class SCNScene;

SWIFT_CLASS("_TtC8ARViewer15ARViewerSCNView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface ARViewerSCNView : ARSCNView
@property (nonatomic, strong) SCNScene * _Nonnull scene;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame options:(NSDictionary<NSString *, id> * _Nullable)options SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

/// Values for feature mode.
/// You can set of viewer mode, see below.
/// \code
/// arViewer.setViewerMode(.AR)
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, FeatureType, closed) {
/// A feature type that detects surfaces and tracking session.
/// attention:
/// If possible, avoid setting AR mode. ARViewer set the mode automatically and manage efficiently.
  FeatureTypeAR = 0,
/// A feature type that detects a QR code.
  FeatureTypeQR = 1,
/// A feature type that tracking session without detects surfaces.
/// note:
///
/// You shoud use this, If your turning back to AR mode.
  FeatureTypeECO = 2,
/// A feature type that measure the surfaces.
  FeatureTypeMeasure = 3,
};

@class SCNGeometry;

SWIFT_CLASS("_TtC8ARViewer6UBNode")
@interface UBNode : SCNNode
@property (nonatomic, strong) SCNGeometry * _Nullable geometry;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UBAsset;

SWIFT_CLASS("_TtC8ARViewer6Figure") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure : UBNode
/// An instance of <code>UBAsset</code>.
/// You can get information of <code>Figure</code> like title, brand, styles and so on.
@property (nonatomic, strong) UBAsset * _Nullable asset;
@property (nonatomic) SCNVector3 scale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UBStyle;

SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface Figure (SWIFT_EXTENSION(ARViewer))
- (void)setStyleWithStyle:(UBStyle * _Nonnull)style progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nullable)(void))completion;
@end



/// The <code>FigureApperanceDelegate</code> protocol defines methods that allow you to manage the preloaded apperance.
/// It is only effective when behavior is <code>PreloadBehaviour</code>.
SWIFT_PROTOCOL("_TtP8ARViewer24FigureAppearanceDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureAppearanceDelegate
@optional
/// Asks the delegate if the preloaded figure should be hidden.
/// If you not implement this protocol. The default value is <code>false</code>.
///
/// returns:
///
/// <code>true</code> if the figure should be hidden or <code>false</code> if it should not.
- (BOOL)shouldHiddenPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate for the opacity of the specified figure.
/// If you not implement this protocol. The default value is <code>0.8</code>.
///
/// returns:
///
/// The opacity of the specified figure. The value must be between 0 and 1.
- (CGFloat)opacityPreloadingFigure SWIFT_WARN_UNUSED_RESULT;
@end


/// A protocol that <code>Figure</code> load delegates implement to interact with a <code>Figure</code> load request.
/// The <code>FigureLoadDelegate</code> protocol defines methods that allow you to receive informational callbacks about the asynchronous load of a <code>Figure</code> request.
SWIFT_PROTOCOL("_TtP8ARViewer18FigureLoadDelegate_") SWIFT_AVAILABILITY(ios,introduced=11.3)
@protocol FigureLoadDelegate
@optional
/// Tells the delegate when the download progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the downloading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the downloading. The value may be <code>1</code>.
///
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the download completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
/// Tells the delegate when the load progress is updated.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param progress A <code>double</code> value that specifies a progress of the loading. The value is between <code>0</code> and <code>1</code>.
///
/// \param total A <code>double</code> value that specifies a total of the loading. The value may be <code>1</code>.
///
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
/// Tells the delegate when the load completed.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param figure A figure that been loaded.
///
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
/// Tells the delegate when the task finishes unsuccessfully.
/// note:
///
/// This is called on the session queue, not the main queue.
/// \param assetId <code>asset_id</code> of  <code>UBAsset</code>
///
/// \param errorCode The error code
///
/// \param message A string containing the description of the error.
///
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
@end


/// A view for displaying 3D content.
/// <h1>FigureView</h1>
/// This is the class that implemented 3D Viewer.
/// You can configure <code>FigureView</code> programmatically or in your storyboard file.
/// This is the <code>UIView</code> subclass that creates and displays virtual object (a.k.a <code>Figure</code>).
/// <h2>Author</h2>
/// Wooseok Lee
/// <h2>Copyright</h2>
/// Copyright Â© 2018 Urbanbase Inc.
SWIFT_CLASS("_TtC8ARViewer10FigureView") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView : UIView
/// A figure which is loaded.
/// The value may be nil until object being loaded.
@property (nonatomic, weak) Figure * _Nullable figure;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Requests that the <code>Figure</code> to be loaded.
/// \param uuid <code>asset_id</code> of <code>UBAsset</code>
///
/// \param token idToken which given by AWSCognito. It is optional.
///
/// \param thumb the URL instance of thumbnail image path. It is optional.
///
- (void)requestFigureWithUuid:(NSString * _Nonnull)uuid token:(NSString * _Nullable)token thumb:(NSURL * _Nullable)thumb;
/// Requests that the <code>Figure</code> which is sample.
- (void)requestFigure;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <SCNSceneRendererDelegate>
- (void)renderer:(id <SCNSceneRenderer> _Nonnull)renderer updateAtTime:(NSTimeInterval)time;
@end


SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface FigureView (SWIFT_EXTENSION(ARViewer)) <FigureAppearanceDelegate, FigureLoadDelegate>
- (void)onDownloadProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onDownloadWithAssetId:(NSString * _Nonnull)assetId;
- (void)onDownloadCompleteWithAssetIds:(NSArray<NSString *> * _Nonnull)assetIds requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onLoadingProgressWithAssetId:(NSString * _Nonnull)assetId progress:(double)progress total:(double)total;
- (void)onLoadWithFigure:(Figure * _Nonnull)figure;
- (void)onLoadCompleteWithFigures:(NSArray<Figure *> * _Nonnull)figures requestCount:(NSInteger)requestCount successCount:(NSInteger)successCount failCount:(NSInteger)failCount;
- (void)onFailWithAssetId:(NSString * _Nonnull)assetId errorCode:(NSString * _Nullable)errorCode message:(NSString * _Nullable)message;
@end

@class UIEvent;

SWIFT_CLASS("_TtC8ARViewer15PassthroughView")
@interface PassthroughView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




typedef SWIFT_ENUM(NSInteger, TrackingMode, closed) {
/// Tracking surfaces continuously, but not updating extents of surfaces.
  TrackingModeNone = 0,
/// Tracking surfaces that are perpendicular to gravity.
  TrackingModeHorizontal = 1,
/// Tracking surfaces that are parallel to gravity.
  TrackingModeVertical = 2,
/// Tracking surfaces both horizontal and vertical.
  TrackingModeAll = 3,
};


/// A informative class that manages properties of figure.
SWIFT_CLASS("_TtC8ARViewer7UBAsset") SWIFT_AVAILABILITY(ios,introduced=11.3)
@interface UBAsset : NSObject
/// The <code>UUID</code> of <code>UBAsset</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_id;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// A brand name of asset
@property (nonatomic, readonly, copy) NSString * _Nonnull brand;
@property (nonatomic, readonly, copy) NSString * _Nonnull thumbnail_path;
/// An array of <code>UBStyle</code>
@property (nonatomic, copy) NSArray<UBStyle *> * _Nonnull styles;
@property (nonatomic, readonly, copy) NSString * _Nonnull asset_description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A informative class that represents the figureâs apperance.
SWIFT_CLASS("_TtCC8ARViewer7UBAsset7UBStyle")
@interface UBStyle : NSObject
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull asset_id;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) BOOL enabled;
@property (nonatomic) BOOL is_default;
@property (nonatomic, copy) NSString * _Nonnull thumbnail_path;
@property (nonatomic, copy) NSDate * _Nonnull created_date;
@property (nonatomic, copy) NSDate * _Nonnull updated_date;
@property (nonatomic, copy) NSDate * _Nonnull deleted_date;
/// A  <code>URL</code> path of color chip image
@property (nonatomic, copy) NSString * _Nonnull color_chip_path;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
